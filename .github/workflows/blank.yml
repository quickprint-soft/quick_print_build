name: CI
on:
  repository_dispatch:
    types:
      - quick_print
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]  
env:
# game
  DEFAULT_DDING_SECRET: 'SEC618a0dffd91ebf7db4c9c00e2a82b863bc6181858cadbdbf1655ca6dcd2fd1cc'
  DEFAULT_DDING_TOKEN: '4e27925ce9df0372171763c071b36bb442cdbf296f315484b9cb165f331da225'
jobs:
  msw-msvs:
    runs-on: windows-${{ matrix.vsversion }}
    name: wxMSW vs${{ matrix.vsversion }} ${{ matrix.configuration }} ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'Release'
            platform: 'x64'
            vsversion: 2019
    steps:

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_GITEE_PRIVATE_KEY }}
      - name: Add Gitee to known hosts
        run: |
          ssh-keyscan gitee.com >> ~/.ssh/known_hosts
    
      - uses: lukka/get-cmake@latest

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dding on non-Windows
        if: runner.os != 'Windows'
        run: |
          pip install dding
          mkdir -p ~/.dding
          dding_secret="${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          dding_token="${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          cat <<EOF > ~/.dding/config.json
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          EOF
      
      - name: Install dding on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pip install dding
          New-Item -Path $HOME\.dding -ItemType Directory -Force
          $dding_secret = "${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          $dding_token = "${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          $config = @"
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          "@
          $config | Out-File -FilePath $HOME\.dding\config.json -Encoding utf8


      # - name: Set up proxy
      #   run: |
      #     git config --global http.proxy socks5://python:psdemo982@123.60.164.114:11654


      - name: Clone repository from Gitee with trace
        shell: pwsh
        run: |
          $env:GIT_TRACE = "1"
          git clone git@gitee.com:charlesabc/quick-print.git
        
          # git clone git@gitee.com:charlesabc/quick-print.git
          # git clone https://oauth2:${{ secrets.GITEE_TOKEN }}@gitee.com/charlesabc/quick-print.git 

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        
      - name: CMake
        shell: powershell
        run: |
          pwd
          dir 
          cd quick-print/build
          cmake ../ -G "Visual Studio 16 2019" 

          # run CMake (additional options like -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE are possible)
          # it is recommended to specify the compiler version used for the build
          # cmake -S . -B cbuild/ -DCRASHPAD_BUILD_EXAMPLES=TRUE -DCMAKE_CXX_COMPILER=cl.exe -DCMAKE_C_COMPILER=cl.exe -DCMAKE_BUILD_TYPE=Release
          # cmake --build cbuild/ --config Release -- /p:Configuration=Release

      - name: Download External Lib
        run: |
          set PYTHONIOENCODING=utf-8
          cd quick-print/tools/external_lib
          pip install -r requirements.txt
          python download.py --arch x64 --build_types dbg
          python download.py --arch x64 --build_types rel


      - name: Build with MSBuild
        run: msbuild -m -t:Build -p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} quick-print/build/quick-print.sln


      - name: Inno Package
        shell: cmd
        run: |
          ls
          cd quick-print\setup\exe
          build.bat

      - name: Check Status
        if: ${{ success() }}
        shell: pwsh
        run: |
          $repoName = $env:GITHUB_REPOSITORY.Split('/')[-1]
          Write-Host "Workflow succeeded for $repoName!"
          dding "github action success :) for $repoName"
          

      - name: Check Status
        if: ${{ failure() }}
        shell: pwsh
        run: |
          $repoName = $env:GITHUB_REPOSITORY.Split('/')[-1]
          Write-Host "Workflow failed for $repoName!"
          dding "github action fail :( $repoName"

      - name: Ls dir
        run: |
          echo "%cd%"
          dir
          cd quick-print
          dir 
          
      - name: Archive binaries
        uses: actions/upload-artifact@v4
        with:
          name: librel64
          path: |
            quick-print\librel64
          retention-days: 1 # <= 这里可以设置保留天数

      - name: Archive binaries
        uses: actions/upload-artifact@v4
        with:
          name: QuickPrintSetupArtifact
          path: |
            quick-print\setup\exe\Output\QuickPrintSetup.exe
          retention-days: 1 # <= 这里可以设置保留天数


  create-release:
    runs-on: ubuntu-latest
    needs: msw-msvs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Install GitHub CLI
        uses: sersoft-gmbh/setup-gh-cli-action@v2

      - name: Delete existing release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete $RELEASE_DATE --yes || true

      - name: Create new release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"


      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: zip Artifacts
        run: |
          ls ./artifacts
          cd ./artifacts
          mv librel64 QuickPrintAll
          zip -r QuickPrintAll.zip QuickPrintAll
          
          
          
      - name: Generate MD5 Checksums
        run: |
          > ./artifacts/filelist.txt  # 清空或创建 filelist.txt 文件
          for file in ./artifacts/*.{zip,exe}; do
            # Calculate MD5 checksum
            md5sum=$(md5sum "$file" | awk '{ print $1 }')
      
            # Write to filelist.txt
            echo "$(basename "$file") | ${md5sum}" >> ./artifacts/filelist.txt
          done

      - name: Upload Artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./artifacts
          gh release upload $RELEASE_DATE ./*.zip
          gh release upload $RELEASE_DATE ./QuickPrintSetupArtifact/*.exe
          gh release upload $RELEASE_DATE filelist.txt
          
      - name: LS Artifacts
        run: |
          ls 
          ls ./artifacts
